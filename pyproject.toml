[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "canvas-course-gamification"
version = "1.0.0"
description = "Framework for creating gamified Canvas LMS courses with skill trees and XP systems"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Canvas Course Gamification Contributors"},
]
maintainers = [
    {name = "Jessica Doner", email = "jdoner@ewu.edu"},
]
keywords = [
    "canvas",
    "lms", 
    "gamification",
    "education",
    "elearning",
    "skill-tree",
    "xp-system",
    "badges",
    "mastery-learning",
    "instructional-design",
    "course-builder",
    "educational-technology",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Topic :: Education",
    "Topic :: Education :: Computer Aided Instruction (CAI)",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.31.0",
    "canvasapi>=3.0.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pydantic>=2.0.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
analytics = [
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]
all = [
    "canvas-course-gamification[dev,docs,analytics]"
]

[project.urls]
Homepage = "https://github.com/yourusername/canvas-course-gamification"
Documentation = "https://github.com/yourusername/canvas-course-gamification/wiki"
Repository = "https://github.com/yourusername/canvas-course-gamification.git"
"Bug Reports" = "https://github.com/yourusername/canvas-course-gamification/issues"
Changelog = "https://github.com/yourusername/canvas-course-gamification/blob/main/CHANGELOG.md"

[project.scripts]
canvas-gamify = "src.deploy:main"
canvas-validate = "src.validators:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.md", "*.txt"]

# Black formatting configuration
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "integration: marks tests as integration tests (may require Canvas instance)",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "canvas_required: marks tests that require Canvas API access",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "canvasapi.*",
    "rich.*",
    "typer.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    "venv",
]
